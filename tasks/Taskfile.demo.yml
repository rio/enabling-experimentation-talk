# https://taskfile.dev

version: '3'

includes:
  tools: 
    taskfile: Taskfile.tools.yml
    internal: true

tasks:
  up:
    desc: "Setup the demo"
    cmds:
      - cmd:  helm upgrade --install --set providers.kubernetesIngress.publishedService.enabled=true --repo https://traefik.github.io/charts traefik --create-namespace --namespace traefik traefik
      - task: deploy-argocd
      - task: setup-github-secrets
      - task: setup-github-notification-secrets
      - task: setup-wildcard-certificate

  delete-cluster:
    desc: "Take down the cluster and everything in it"
    cmds:
      - k3d cluster delete

  create-cluster:
    desc: "Start the cluster"
    cmds:
      - k3d cluster create --config k3d-config.yaml
      - until kubectl wait --for condition=ready pods -l k8s-app=kube-dns -n kube-system; do sleep 2; done
    status:
      - k3d cluster list --no-headers | grep k3s-default > /dev/null

  deploy-argocd:
    internal: true
    desc: "Deploy ArgocD and its apps"
    cmds:
      - kubectl apply -k argocd
      - kubectl wait --for condition=established crds/applications.argoproj.io --timeout 300s
      - kubectl apply -f argocd/app-of-apps.yaml

  setup-github-secrets:
    internal: true
    desc: Setup secrets used by ArgoCD to access github.
    requires:
      vars:
        - GITHUB_APP_ID
        - GITHUB_APP_INSTALLATION_ID
        - GITHUB_APP_PRIVATE_KEY_FILE
        - GITHUB_REPO
    status:
      - kubectl get secret github-credentials -n argocd > /dev/null
    cmds:
      - |
        kubectl create secret generic github-credentials \
          -n argocd \
          --from-literal=type=git \
          --from-literal=url={{.GITHUB_REPO}} \
          --from-literal=githubAppID={{.GITHUB_APP_ID}} \
          --from-literal=githubAppInstallationID={{.GITHUB_APP_INSTALLATION_ID}} \
          --from-file=githubAppPrivateKey={{.GITHUB_APP_PRIVATE_KEY_FILE}}

      - kubectl -n argocd label secret github-credentials argocd.argoproj.io/secret-type=repo-creds

  setup-github-notification-secrets:
    internal: true
    desc: Setup secrets used by ArgoCD to access github status checks.
    requires:
      vars:
        - GITHUB_APP_PRIVATE_KEY_FILE
    status:
      - kubectl get secret argocd-notifications-secret -n argocd > /dev/null
    cmds:
      - |
        kubectl create secret generic argocd-notifications-secret \
          -n argocd \
          --from-file=github-private-key={{.GITHUB_APP_PRIVATE_KEY_FILE}}

  setup-wildcard-certificate:
    internal: true
    desc: Setup the secret containing the wildcard certificate used by traefik.
    requires:
      vars:
        - CERTIFICATE_KEY_FILE
        - CERTIFICATE_CERT_FILE
    status:
      - kubectl get secret default-certificate -n argocd > /dev/null
    cmds:
      - |
        kubectl create secret generic default-certificate \
          -n argocd \
          --from-file=tls.crt={{.CERTIFICATE_CERT_FILE}} \
          --from-file=tls.key={{.CERTIFICATE_KEY_FILE}}

  port-forward-argocd:
    desc: "Starts a port-forward to ArgoCD to make it accessible on localhost:8080"
    cmds:
      - kubectl port-forward --namespace argocd svc/argocd-server 8080:443

  slides:
    desc: "Start the slides"
    dir: slides
    deps:
      - task: tools:ensure-slides-dependencies
    cmds:
      - ./bin/slides slides.md

  invite-users:
    interactive: true
    silent: true
    deps:
      - task: tools:ensure-gum
    requires:
      vars:
        # token requires the following permissions: read:org, public_repo, repo:invite
        - GITHUB_TOKEN
    vars:
      GITHUB_API_URL: https://api.github.com/repos/rio/enabling-experimentation-workshop
      DRYRUN: "{{.DRYRUN | default true}}"
    cmds:
      - |-
        .bin/gum spin --title="Fetching stargazers..." --show-output -- curl --header "X-GitHub-Api-Version: 2022-11-28" --header "Authorization: Bearer {{.GITHUB_TOKEN}}" {{.GITHUB_API_URL}}/stargazers?per_page=100 | jq -r '.[].login' | sort -u > /tmp/stargazers
        .bin/gum spin --title="Fetching collaborators..." --show-output -- curl --header "X-GitHub-Api-Version: 2022-11-28" --header "Authorization: Bearer {{.GITHUB_TOKEN}}" {{.GITHUB_API_URL}}/collaborators?per_page=100 | jq -r '.[].login' | sort -u > /tmp/collaborators
        .bin/gum spin --title="Fetching existing invites..." --show-output -- curl --header "X-GitHub-Api-Version: 2022-11-28" --header "Authorization: Bearer {{.GITHUB_TOKEN}}" {{.GITHUB_API_URL}}/invitations?per_page=100 | jq -r '.[].invitee.login' | sort -u > /tmp/invited-users

        comm -23 /tmp/stargazers /tmp/collaborators > /tmp/missing-collaborators
        comm -23 /tmp/missing-collaborators /tmp/invited-users > /tmp/need-an-invitiation

        users_to_add=($(cat /tmp/need-an-invitiation | .bin/gum filter --limit=0 --no-limit --prompt="Select users to invite > "))

        .bin/gum confirm --default=false "Are you sure you want to add ${#users_to_add[*]} users?"

        for user in ${users_to_add[*]}; do
          if [[ "{{.DRYRUN}}" = "false" ]] ; then
            .bin/gum spin --title="Inviting $user..." -- curl -sSf --header "X-GitHub-Api-Version: 2022-11-28" --header "Authorization: Bearer {{.GITHUB_TOKEN}}" --request PUT {{.GITHUB_API_URL}}/collaborators/$user
            .bin/gum spin --title="Avoiding rate limits..." -- sleep 1
          else
            .bin/gum spin --title="[DRYRUN] Inviting $user..." -- sleep 1
          fi
        done
